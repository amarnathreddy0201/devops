#include <Poco/Net/HTTPClientSession.h>
#include <Poco/Net/HTTPRequest.h>
#include <Poco/Net/HTTPResponse.h>
#include <Poco/Path.h>
#include <Poco/URI.h>
#include <iostream>
#include <string>
#include <Poco/JSON/JSON.h>
#include <Poco/JSON/Parser.h>

#include <Windows.h>



float RandomFloat(float a, float b) {
    float random = ((float)rand()) / (float)RAND_MAX;
    float diff = b - a;
    float r = random * diff;
    return a + r;
}

std::string do_write(Poco::JSON::Object& obj) {


    obj.set("sleep_time_in_s", 0.1);
    obj.set("dia", RandomFloat(2.3,2.5));
    obj.set("inner", RandomFloat(2.2, 2.4));
    obj.set("core", RandomFloat(2.0, 2.3));

    std::stringstream ss;
    obj.stringify(ss);

    std::string body;
    body = ss.str();
    return body;
}

int main()
{
    // prepare session
    //Poco::URI uri("");

    const char host[10] = "127.0.0.1";

    const int port = 4001;

    Poco::Net::HTTPClientSession session(host, port);
    session.setAlive(true);

    // prepare path
    std::string path;

    path = "/metrics/";

    Poco::JSON::Object obj;


    // send request
    Poco::Net::HTTPRequest req(Poco::Net::HTTPRequest::HTTP_POST, path);

    

    // req.setKeepAlive(true);
    try{

        do {

            std::string body = do_write(obj);

            req.setContentType("application/json");
            req.setContentLength(body.length());
            //req.setKeepAlive(true);

            session.sendRequest(req) << body;

            // get response
            Poco::Net::HTTPResponse res;
            //std::cout << "Response Status = " << res.getStatus() << std::endl;

            std::cout << "Response Reason = " << res.getReason() << std::endl;
            Sleep(10);
        } while (true);

    }
    catch (const Poco::Exception& exc)
    {
        std::cerr <<"ygibgybyy: "<< exc.displayText() << std::endl;
    }

    return 0;

}
